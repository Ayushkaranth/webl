
#include <DHTesp.h>              // Including library for DHT
#include <ESP8266WiFi.h>         // Including library for WiFi

String apiKey = "TR25FF8MCRN3TA2W";        // Your Write API key from ThingSpeak
const char *ssid = "Varun's M31s";         // Your WiFi SSID
const char *pass = "123456789";            // Your WiFi password
const char *server = "api.thingspeak.com"; // ThingSpeak server

#define DHTPIN 16                 // Pin where DHT11 is connected
DHTesp dht;                       // Create DHT object
WiFiClient client;               // Create WiFi client object

void setup() {
  Serial.begin(9600);            // Start Serial Monitor at 9600 baud rate
  delay(10);                     // Small delay

  dht.setup(DHTPIN, DHTesp::DHT11); // Initialize DHT sensor on GPIO 16

  Serial.println("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);       // Connect to WiFi

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
}

void loop() {
  float h = dht.getHumidity();      // Read humidity
  float t = dht.getTemperature();   // Read temperature

  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  if (client.connect(server, 80)) {
    String postStr = apiKey;
    postStr += "&field1=";
    postStr += String(t);
    postStr += "&field2=";
    postStr += String(h);
    postStr += "\r\n\r\n";

    client.print("POST /update HTTP/1.1\n");
    client.print("Host: api.thingspeak.com\n");
    client.print("Connection: close\n");
    client.print("X-THINGSPEAKAPIKEY: " + apiKey + "\n");
    client.print("Content-Type: application/x-www-form-urlencoded\n");
    client.print("Content-Length: ");
    client.print(postStr.length());
    client.print("\n\n");
    client.print(postStr);

    Serial.print("Temperature: ");
    Serial.print(t);
    Serial.println(" Celsius");

    Serial.print("Humidity: ");
    Serial.print(h);
    Serial.println("%. Sent to ThingSpeak.");
  }

  client.stop();
  Serial.println("Waiting...");
  delay(30000); // Wait 30 seconds before sending next data (minimum 15 sec required)
}
