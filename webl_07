
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>




// Replace with your network credentials
const char* ssid = "AYUSH's A35";
const char* password = "ayush2005";




// Inbuilt LED pin (on NodeMCU, it is usually GPIO2)
#define LED_PIN 2
#define IN1_PIN 5   // D1 (GPIO 5)
#define IN2_PIN 16  // D0 (GPIO 16)
#define IN3_PIN 0   // D3 (GPIO 0)
#define IN4_PIN 4   // D2 (GPIO 4)




// Create an AsyncWebServer object on port 80
AsyncWebServer server(80);




const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html { font-family: Arial; display: inline-block; margin: 0px auto; text-align: center; }
    h2 { font-size: 3.0rem; }
    p { font-size: 3.0rem; }
    .button {
      background-color: #4CAF50;
      border: none;
      color: white;
      padding: 16px 20px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      margin: 4px 2px;
      cursor: pointer;
    }
    .button-off {
      background-color: #f44336; /* Red */
    }
  </style>
</head>
<body>
  <h2>NodeMCU Web Server</h2>
  <h2>26, 27, 28, 30, 44</h2>
  <p>
    <!-- Toggle buttons for controlling IN1 to IN4 -->
    <button id="in1Button" class="button" onclick="toggleIN('IN1')">Turn IN1 ON</button>
    <button id="in2Button" class="button" onclick="toggleIN('IN2')">Turn IN2 ON</button>
    <button id="in3Button" class="button" onclick="toggleIN('IN3')">Turn IN3 ON</button>
    <button id="in4Button" class="button" onclick="toggleIN('IN4')">Turn IN4 ON</button>
  </p>




  <script>
  // Function to toggle LED state
  function toggleLED() {
    var xhttp = new XMLHttpRequest();
    xhttp.open("GET", "/toggleLED", true);
    xhttp.send();
  }




  // Function to toggle IN1 to IN4 states
  function toggleIN(inName) {
    var xhttp = new XMLHttpRequest();
    xhttp.open("GET", "/" + inName + "toggle", true);
    xhttp.send();
  }




  // Function to update button text based on state
  function updateButton(buttonId, state) {
    var button = document.getElementById(buttonId);
    if (state) {
      button.innerHTML = "Turn " + buttonId + " OFF";
      button.classList.remove("button-off");
    } else {
      button.innerHTML = "Turn " + buttonId + " ON";  
      button.classList.add("button-off");
    }
  }




  // Function to refresh state from server
  setInterval(function() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var states = this.responseText.split(",");
        updateButton("in1Button", states[0] == "1");
        updateButton("in2Button", states[1] == "1");
        updateButton("in3Button", states[2] == "1");
        updateButton("in4Button", states[3] == "1");
      }
    };
    xhttp.open("GET", "/getState", true);
    xhttp.send();
  }, 1000);
  </script>
</body>
</html>)rawliteral";




// Route to serve the main HTML page
void setup(){
  // Serial port for debugging purposes
  Serial.begin(9600);
 
  // Initialize the inbuilt LED and IN1 to IN4 pins as outputs
  pinMode(LED_PIN, OUTPUT);
  pinMode(IN1_PIN, OUTPUT);
  pinMode(IN2_PIN, OUTPUT);
  pinMode(IN3_PIN, OUTPUT);
  pinMode(IN4_PIN, OUTPUT);
 
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }




  // Print the IP address of the NodeMCU once connected to Wi-Fi
  Serial.println("\nConnected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());




  // Serve the HTML page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });




  // Route to toggle the LED state
  server.on("/toggleLED", HTTP_GET, [](AsyncWebServerRequest *request){
    static bool ledState = false;
    ledState = !ledState;
    digitalWrite(LED_PIN, ledState ? LOW : HIGH); // Toggle the LED (LOW turns it ON, HIGH turns it OFF)
    request->send(200, "text/plain", "LED Toggled");
  });




  // Route to toggle IN1 state
  server.on("/IN1toggle", HTTP_GET, [](AsyncWebServerRequest *request){
    static bool in1State = false;
    in1State = !in1State;
    digitalWrite(IN1_PIN, in1State ? LOW : HIGH); // Toggle IN1
    request->send(200, "text/plain", "IN1 Toggled");
  });




  // Route to toggle IN2 state
  server.on("/IN2toggle", HTTP_GET, [](AsyncWebServerRequest *request){
    static bool in2State = false;
    in2State = !in2State;
    digitalWrite(IN2_PIN, in2State ? LOW : HIGH); // Toggle IN2
    request->send(200, "text/plain", "IN2 Toggled");
  });




  // Route to toggle IN3 state
  server.on("/IN3toggle", HTTP_GET, [](AsyncWebServerRequest *request){
    static bool in3State = false;
    in3State = !in3State;
    digitalWrite(IN3_PIN, in3State ? LOW : HIGH); // Toggle IN3
    request->send(200, "text/plain", "IN3 Toggled");
  });




  // Route to toggle IN4 state
  server.on("/IN4toggle", HTTP_GET, [](AsyncWebServerRequest *request){
    static bool in4State = false;
    in4State = !in4State;
    digitalWrite(IN4_PIN, in4State ? LOW : HIGH); // Toggle IN4
    request->send(200, "text/plain", "IN4 Toggled");
  });




  // Route to get the current state of all pins
  server.on("/getState", HTTP_GET, [](AsyncWebServerRequest *request){
    String state = String(digitalRead(LED_PIN)) + "," +
                   String(digitalRead(IN1_PIN)) + "," +
                   String(digitalRead(IN2_PIN)) + "," +
                   String(digitalRead(IN3_PIN)) + "," +
                   String(digitalRead(IN4_PIN));
    request->send(200, "text/plain", state);
  });




  // Start the server
  server.begin();
}




void loop(){
  // Nothing to do in the loop, everything is handled by the server
}
